<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="8f6ef882-cf83-4180-b211-0c86e9b2817a" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="05_DoWithdrawal" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="8f6ef882-cf83-4180-b211-0c86e9b2817afileName">05_DoWithdrawal</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="453e135b-f534-4757-8743-81e5e89be220"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>12</con:value></con:property><con:property><con:name>transaction_id</con:name><con:value>3053</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="request" id="11e627ca-1f9f-4da0-a744-dc3f41246a46" name="getAllAccountData"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BankServiceSoapBinding</con:interface><con:operation>getAllAccountData</con:operation><con:request name="getAllAccountData" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="6f75c579-14ed-46c9-bcff-30321eb8df65"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/redesigned-invention/services/BankService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://service.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getAllAccountData/>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="207c81a5-f50d-4093-825b-6ec0528e0cfd" name="SOAP Response"/><con:assertion type="SOAP Fault Assertion" id="9071723c-fb4c-470f-ab97-8a29a5424bbf" name="Not SOAP Fault"/><con:assertion type="XPath Match" id="17ba5fa2-d155-4f6a-992d-4e648359d382" name="Check for existence of [accountDataArray]"><con:configuration><path>declare namespace ns1='http://service.com';
exists( //ns1:getAllAccountDataResponse/ns1:getAllAccountDataReturn/ns1:accountDataArray/ns1:accountDataArray)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="62a4c240-593f-4816-a1bf-103bfa90267c" name="Match content of [account_id] using RegEx"><con:configuration><path>declare namespace ns1='http://service.com';
matches( //ns1:getAllAccountDataResponse[1]/ns1:getAllAccountDataReturn[1]/ns1:accountDataArray[1]/ns1:accountDataArray[1]/ns1:account_id[1]/text(), '2[0-9]{3}' )</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.com/BankService/getAllAccountDataRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="datasource" name="DataSource" id="6d0975da-db9c-4baa-82f8-af258212f003"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="XML"><con:configuration><sourceStep>getAllAccountData</sourceStep><sourceProperty>Response</sourceProperty><rowPath>declare namespace ns1='http://service.com';
//ns1:getAllAccountDataResponse[1]/ns1:getAllAccountDataReturn[1]/ns1:accountDataArray[1]/ns1:accountDataArray</rowPath><columnPath>ns1:account_id[1]</columnPath><columnPath>ns1:balance[1]</columnPath></con:configuration></con:dataSource><con:shared>true</con:shared><con:restartShared>true</con:restartShared><con:property>account_id</con:property><con:property>amount</con:property><con:startRow/><con:endRow/><con:recordsPerIteration>1</con:recordsPerIteration><con:completeLastOperation>true</con:completeLastOperation><con:failOnEmpty>true</con:failOnEmpty><con:trimValues>false</con:trimValues><con:entitizeValues>false</con:entitizeValues><con:restartOnRun>false</con:restartOnRun><con:expandProperties>false</con:expandProperties></con:config></con:testStep><con:testStep type="transfer" name="Amount Transfer" id="924ad23d-5c24-435b-992c-2d6586d5b753"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>amount</con:sourceType><con:sourceStep>DataSource</con:sourceStep><con:sourcePath/><con:targetType>amount</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="HalfAmount" id="0aa389d7-2eba-4138-8e02-a6ef317bda66"><con:settings/><con:config><script>def amount= context.testCase.getTestStepByName("Properties").getPropertyValue("amount")  as Double
amount = amount/2 as Integer
context.testCase.getTestStepByName("Properties").setPropertyValue("amount",amount.toString()) </script></con:config></con:testStep><con:testStep type="request" id="442ac900-8348-43db-9d67-61a10acbc885" name="doWithdraw"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BankServiceSoapBinding</con:interface><con:operation>doWithdraw</con:operation><con:request name="doWithdraw" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="a107bcab-eb92-4e1b-a1e3-50e7e57934e5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/redesigned-invention/services/BankService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://service.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:doWithdraw>
         <ser:account_id>${DataSource#account_id}</ser:account_id>
         <ser:amount>${Properties#amount}</ser:amount>
      </ser:doWithdraw>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="ef308737-b790-4bb8-86e6-89104342ece7" name="SOAP Response"/><con:assertion type="SOAP Fault Assertion" id="0cdb4b71-07bc-4ced-8d32-fd9310d30af4" name="Not SOAP Fault"/><con:assertion type="XPath Match" id="d74fd59a-ce88-4656-9603-bb01f4600a74" name="Check for existence of [doWithdrawReturn]"><con:configuration><path>declare namespace ns1='http://service.com';
exists( //ns1:doWithdrawResponse/ns1:doWithdrawReturn)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="bc5b9856-98c8-49a2-a6a8-7079e34c82de" name="Match content of [account_id]"><con:configuration><path>declare namespace ns1='http://service.com';
//ns1:doWithdrawResponse[1]/ns1:doWithdrawReturn[1]/ns1:account_id[1]/text()</path><content>${DataSource#account_id}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="5f442deb-6201-401a-855b-4d0138032d6e" name="Match content of [description]"><con:configuration><path>declare namespace ns1='http://service.com';
//ns1:doWithdrawResponse[1]/ns1:doWithdrawReturn[1]/ns1:description[1]/text()</path><content>Withdrawn ${Properties#amount}.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.com/BankService/doWithdrawRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransfer 1" id="898d3625-f97a-4fe3-9ef1-c4f60f9d4859"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>transaction_id</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>doWithdraw</con:sourceStep><con:sourcePath>declare namespace ns1='http://service.com';
//ns1:doWithdrawResponse[1]/ns1:doWithdrawReturn[1]/ns1:transaction_id[1]</con:sourcePath><con:targetType>transaction_id</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" id="3c5495c9-56d4-41b9-afed-6c5a74c6051c" name="getAllTransactionData"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BankServiceSoapBinding</con:interface><con:operation>getAllTransactionData</con:operation><con:request name="getAllTransactionData" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="849ff1ab-6490-4165-8dcc-acb4ddbe7999"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/redesigned-invention/services/BankService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://service.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getAllTransactionData/>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="c0cfedad-e74c-4728-897e-18a599023482" name="SOAP Response"/><con:assertion type="SOAP Fault Assertion" id="bff46ab5-4224-40c6-8a8b-6ace86f72ac9" name="Not SOAP Fault"/><con:assertion type="XPath Match" id="361d6c9f-9a82-4f51-81f0-73826ef0cfca" name="Check for existence of [transactionDataArray]"><con:configuration><path>declare namespace ns1='http://service.com';
exists( //ns1:getAllTransactionDataResponse/ns1:getAllTransactionDataReturn/ns1:transactionDataArray/ns1:transactionDataArray)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="88cc1303-d776-48a8-908d-929637409c49" name="Match content of [account_id] using RegEx"><con:configuration><path>declare namespace ns1='http://service.com';
matches( //ns1:getAllTransactionDataResponse[1]/ns1:getAllTransactionDataReturn[1]/ns1:transactionDataArray[1]/ns1:transactionDataArray[1]/ns1:account_id[1]/text(), '2[0-9]{3}' )</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="88f1e13f-b263-4fc0-a4e1-aa44c1f497ea" name="Match content of [transaction_id] using RegEx"><con:configuration><path>declare namespace ns1='http://service.com';
matches( //ns1:getAllTransactionDataResponse[1]/ns1:getAllTransactionDataReturn[1]/ns1:transactionDataArray[1]/ns1:transactionDataArray[1]/ns1:transaction_id[1]/text(), '3[0-9]{3}' )</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="339db075-cceb-42a7-9a73-a3dc3f370256" name="TransactionID"><con:configuration><token>${Properties#transaction_id}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="3e5b69fd-9223-454c-865e-f4577f3ab0e3" name="AccountID"><con:configuration><token>${DataSource#account_id}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.com/BankService/getAllTransactionDataRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="00ddd729-0393-442c-9fcf-d0cc6e7eefe0"><con:settings/><con:config><dataSourceStep>DataSource</dataSourceStep><targetStep>doWithdraw</targetStep><discardResults>true</discardResults></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>8d3cfc75-39fd-48cb-becb-2277c1b57a16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>02b3c244-b35a-4c54-9c76-57a274ae294f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f20e8631-9139-4e7c-8e7f-6db223385e8a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8651aa84-7b2a-46e8-89dd-7da58c8629b7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>924ad23d-5c24-435b-992c-2d6586d5b753</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0aa389d7-2eba-4138-8e02-a6ef317bda66</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
