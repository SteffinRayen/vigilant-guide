<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="549dbf37-3d9a-42ea-a4c2-1ec8d2a58611" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="06_FundsTransfer" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="549dbf37-3d9a-42ea-a4c2-1ec8d2a58611fileName">06_FundsTransfer</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="883a976e-7ec7-4346-aa89-5979914bd354"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>fromAccountID</con:name><con:value>2069</con:value></con:property><con:property><con:name>toAccountID</con:name><con:value>2066</con:value></con:property><con:property><con:name>amount</con:name><con:value>936</con:value></con:property><con:property><con:name>loopIndex</con:name><con:value>0</con:value></con:property><con:property><con:name>loopEnd</con:name><con:value>10</con:value></con:property><con:property><con:name>fromTransactionID</con:name><con:value>3022</con:value></con:property><con:property><con:name>toTransactionID</con:name><con:value xsi:nil="true"/></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="Initialize" id="49201682-a76a-4303-a96e-eb17ebf65278"><con:settings/><con:config><script>propTestStep = context.testCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("loopIndex","0")
</script></con:config></con:testStep><con:testStep type="request" id="741bb71e-3094-421a-8ed6-1adb8b64fc1a" name="AccountData"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BankServiceSoapBinding</con:interface><con:operation>getAllAccountData</con:operation><con:request name="AccountData" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="af40f8b7-f0f6-4252-9966-894f33ea09b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/redesigned-invention/services/BankService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://service.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getAllAccountData/>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="529b0c1b-9ddd-4fdf-8e0f-bfd340929648" name="SOAP Response"/><con:assertion type="XPath Match" id="00ac1ea4-7cbe-407a-8c9a-45a70111ce0f" name="Check for existence of [accountDataArray]"><con:configuration><path>declare namespace ns1='http://service.com';
exists( //ns1:getAllAccountDataResponse/ns1:getAllAccountDataReturn/ns1:accountDataArray)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="946e9a7b-22fd-4b61-bce4-b0b36d1bbabe" name="Match content of [account_id] using RegEx"><con:configuration><path>declare namespace ns1='http://service.com';
matches( //ns1:getAllAccountDataResponse[1]/ns1:getAllAccountDataReturn[1]/ns1:accountDataArray[1]/ns1:accountDataArray[1]/ns1:account_id[1]/text(), '2[0-9]{3}' )</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" id="dd83eb46-4484-4eb1-921a-ac4b56e6e215" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.com/BankService/getAllAccountDataRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="RandomPropertyTransfer" id="858ab158-4034-4074-a112-0131a6cbd2bd"><con:settings/><con:config><script>import java.util.Random
Random random = new Random()

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( "AccountData#Response" )

holder.namespaces["ns2"] = "http://service.com"

def min = 1
def max = holder["count(//ns2:getAllAccountDataResponse/*:getAllAccountDataReturn/*:accountDataArray/*:accountDataArray)"] as Integer

def randomValue = random.nextInt(max + 1 - min) + min;
def fromAccount =  holder.getNodeValue("//ns2:getAllAccountDataResponse/*:getAllAccountDataReturn/*:accountDataArray/*:accountDataArray["+randomValue+"]/*:account_id/text()") 

randomValue = random.nextInt(max + 1 - min) + min;
def toAccount =  holder.getNodeValue("//ns2:getAllAccountDataResponse/*:getAllAccountDataReturn/*:accountDataArray/*:accountDataArray["+randomValue+"]/*:account_id/text()") 

randomValue = random.nextInt(1000+ 1 - min) + min as String;

def myTestCase = context.testCase 
propTestStep = myTestCase.getTestStepByName("Properties") 
propTestStep.setPropertyValue("fromAccountID", fromAccount)
propTestStep.setPropertyValue("toAccountID", toAccount)
propTestStep.setPropertyValue("amount", randomValue)
</script></con:config></con:testStep><con:testStep type="request" id="29c9361c-aa86-42ce-9329-0687f4f0cce8" name="FundsTransfer"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BankServiceSoapBinding</con:interface><con:operation>doFundsTransfer</con:operation><con:request name="FundsTransfer" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="e047673c-4c47-48d6-854b-fcfcb0d57062"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/redesigned-invention/services/BankService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://service.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:doFundsTransfer>
         <ser:fromAccountID>${Properties#fromAccountID}</ser:fromAccountID>
         <ser:toAccountID>${Properties#toAccountID}</ser:toAccountID>
         <ser:amount>${Properties#amount}</ser:amount>
      </ser:doFundsTransfer>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="67c0b419-2aad-406f-909c-deabf63433dd" name="SOAP Response"/><con:assertion type="XPath Match" id="f577776b-d23b-4b03-b332-f8b6879ad7d9" name="Match content of [description]"><con:configuration><path>declare namespace ns1='http://service.com';
//ns1:doFundsTransferResponse[1]/ns1:doFundsTransferReturn[1]/ns1:transactionDataArray[1]/ns1:transactionDataArray[1]/ns1:description[1]/text()</path><content>Withdrawn ${Properties#amount}.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="b324284b-6fb1-46b6-99c3-c864bdd7f9ce" name="Match content of [description]"><con:configuration><path>declare namespace ns1='http://service.com';
//ns1:doFundsTransferResponse[1]/ns1:doFundsTransferReturn[1]/ns1:transactionDataArray[1]/ns1:transactionDataArray[2]/ns1:description[1]/text()</path><content>Deposit ${Properties#amount}.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="09663095-66aa-4b1d-a561-9cc8e466f8b9" name="Match content of [transaction_id] using RegEx"><con:configuration><path>declare namespace ns1='http://service.com';
matches( //ns1:doFundsTransferResponse[1]/ns1:doFundsTransferReturn[1]/ns1:transactionDataArray[1]/ns1:transactionDataArray[1]/ns1:transaction_id[1]/text(), '3[0-9]{3}' )</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="35d9a954-dd39-4e2d-82e5-ab658c49bd3e" name="Match content of [transaction_id] using RegEx"><con:configuration><path>declare namespace ns1='http://service.com';
matches( //ns1:doFundsTransferResponse[1]/ns1:doFundsTransferReturn[1]/ns1:transactionDataArray[1]/ns1:transactionDataArray[2]/ns1:transaction_id[1]/text(), '3[0-9]{3}' )</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="74ebe993-7bb9-427d-baa6-c58cf3ca5b42" name="Check for existence of [transactionDataArray]"><con:configuration><path>declare namespace ns1='http://service.com';
exists( //ns1:doFundsTransferResponse/ns1:doFundsTransferReturn/ns1:transactionDataArray)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.com/BankService/doFundsTransferRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransfer 1" id="dd06e9dd-dfaa-45fb-a2b3-699691048fb8"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>to_transaction_id</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>FundsTransfer</con:sourceStep><con:sourcePath>declare namespace ns1='http://service.com';
//ns1:doFundsTransferResponse[1]/ns1:doFundsTransferReturn[1]/ns1:transactionDataArray[1]/ns1:transactionDataArray[2]/ns1:transaction_id[1]</con:sourcePath><con:targetType>toTransactionID</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/><con:type>XPATH</con:type><con:targetTransferType>JSONPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>transaction_id</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>FundsTransfer</con:sourceStep><con:sourcePath>declare namespace ns1='http://service.com';
//ns1:doFundsTransferResponse[1]/ns1:doFundsTransferReturn[1]/ns1:transactionDataArray[1]/ns1:transactionDataArray[1]/ns1:transaction_id[1]</con:sourcePath><con:targetType>fromTransactionID</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/><con:type>XPATH</con:type><con:targetTransferType>XPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="request" id="3c66c99c-b906-4eda-abee-d3e89120d24f" name="getAllTransactionData"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BankServiceSoapBinding</con:interface><con:operation>getAllTransactionData</con:operation><con:request name="getAllTransactionData" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="0969e9e2-ac00-4f5d-b754-704228e80ecd"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/redesigned-invention/services/BankService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://service.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getAllTransactionData/>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="20f6565f-48f1-408e-b6a9-2b2d260424b0" name="SOAP Response"/><con:assertion type="SOAP Fault Assertion" id="c1102735-65d1-4669-864c-ee30837a931d" name="Not SOAP Fault"/><con:assertion type="Simple Contains" id="f8f41890-4219-4fd5-91bb-081e459aaa5c" name="From Transaction ID"><con:configuration><token>${Properties#fromTransactionID}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="521233ae-9a17-4572-bde6-19e7f1727a86" name="To Transaction ID"><con:configuration><token>${Properties#toTransactionID}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.com/BankService/getAllTransactionDataRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Looper" id="39cdafbf-f2b7-40d9-9bd5-4a424afa9c3c"><con:settings/><con:config><script>def myTestCase = context.testCase 
propTestStep = myTestCase.getTestStepByName("Properties") 

def localloopIndex = propTestStep.getPropertyValue("loopIndex") as Integer
def localloopEnd = propTestStep.getPropertyValue("loopEnd") as Integer
if(  localloopIndex   &lt; localloopEnd ){
	propTestStep.setPropertyValue("loopIndex", (localloopIndex  + 1) as String)	
	testRunner.gotoStepByName( "AccountData" )
}



</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>1385b78c-e05f-4585-8d89-8d2b9262fa4c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
