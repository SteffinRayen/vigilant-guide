<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="39380acd-9183-42d4-ab8b-9f08a4cd4e13" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="03_CreateCustomerAccountMapping" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="39380acd-9183-42d4-ab8b-9f08a4cd4e13fileName">03_CreateCustomerAccountMapping</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="Initialize" id="31f4e953-71b4-40b7-a9b2-3c3accc467a5"><con:settings/><con:config><script>propTestStep = context.testCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("loopIndex","0")
</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="b37f2dc3-1546-4162-bb42-b853a9be802d"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>AccountID</con:name><con:value>2034</con:value></con:property><con:property><con:name>CustomerID</con:name><con:value>1028</con:value></con:property><con:property><con:name>loopIndex</con:name><con:value>10</con:value></con:property><con:property><con:name>loopEnd</con:name><con:value>10</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="request" id="e3540823-d4d4-4b88-a8bb-3b85547153c9" name="getAllAccountData"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BankServiceSoapBinding</con:interface><con:operation>getAllAccountData</con:operation><con:request name="getAllAccountData" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="4e82b44b-a1f0-491a-941d-85ba1798a957"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/redesigned-invention/services/BankService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://service.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getAllAccountData/>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="46f9d61d-49ae-47fa-98fb-2c60a36f9c10" name="SOAP Response"/><con:assertion type="SOAP Fault Assertion" id="f449e7bd-4a24-4c2b-97d9-d5b9ccc31141" name="Not SOAP Fault"/><con:assertion type="XPath Match" id="c9d96339-4fd4-47dd-b129-03ce38f6e466" name="Check for existence of [account_id]"><con:configuration><path>declare namespace ns1='http://service.com';
exists( //ns1:getAllAccountDataResponse/ns1:getAllAccountDataReturn/ns1:accountDataArray/ns1:accountDataArray/ns1:account_id)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="82213e78-d371-4309-a255-62f516d9f150" name="Match content of [account_id] using RegEx"><con:configuration><path>declare namespace ns1='http://service.com';
matches( //ns1:getAllAccountDataResponse[1]/ns1:getAllAccountDataReturn[1]/ns1:accountDataArray[1]/ns1:accountDataArray[1]/ns1:account_id[1]/text(), '2[0-9]{3}' )</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.com/BankService/getAllAccountDataRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" id="b3cbd3ce-8396-4d8c-9277-42feff371e1e" name="getAllCustomerData"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BankServiceSoapBinding</con:interface><con:operation>getAllCustomerData</con:operation><con:request name="getAllCustomerData" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="9b403cbb-8753-41b0-8048-2ddd8eee59a5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/redesigned-invention/services/BankService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://service.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getAllCustomerData/>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="13c2aaa2-53df-4c93-ac33-d5c0224017fb" name="SOAP Response"/><con:assertion type="SOAP Fault Assertion" id="0d3d2ab5-42de-4b8e-b46e-4df196a2342c" name="Not SOAP Fault"/><con:assertion type="XPath Match" id="e193d7c0-ad2f-40c9-8ecb-7ad16f430200" name="Check for existence of [customer_id]"><con:configuration><path>declare namespace ns1='http://service.com';
exists( //ns1:getAllCustomerDataResponse/ns1:getAllCustomerDataReturn/ns1:customerDataArray/ns1:customerDataArray/ns1:customer_id)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="3f9203fc-b949-4d33-ba5d-04184a8fb9e1" name="Match content of [customer_id] using RegEx"><con:configuration><path>declare namespace ns1='http://service.com';
matches( //ns1:getAllCustomerDataResponse[1]/ns1:getAllCustomerDataReturn[1]/ns1:customerDataArray[1]/ns1:customerDataArray[1]/ns1:customer_id[1]/text(), '1[0-9]{3}' )</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.com/BankService/getAllCustomerDataRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="RandomPropertyTransfer" id="e9023bfa-7336-4228-9299-c5900792435e"><con:settings/><con:config><script>import java.util.Random
Random random = new Random()
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( "getAllAccountData#Response" )
holder.namespaces["ns2"] = "http://service.com"
def min = 1
def max = holder["count(//ns2:getAllAccountDataResponse/*:getAllAccountDataReturn/*:accountDataArray/*:accountDataArray)"] as Integer
def randomValue = random.nextInt(max + 1 - min) + min;
def AccountID =  holder.getNodeValue("//ns2:getAllAccountDataResponse/*:getAllAccountDataReturn/*:accountDataArray/*:accountDataArray["+randomValue+"]/*:account_id/text()") 
holder = groovyUtils.getXmlHolder( "getAllCustomerData#Response" )
holder.namespaces["ns2"] = "http://service.com"
max = holder["count(//ns2:getAllCustomerDataResponse/*:getAllCustomerDataReturn/*:customerDataArray/*:customerDataArray)"] as Integer
randomValue = random.nextInt(max + 1 - min) + min;
def CustomerID =  holder.getNodeValue("//ns2:getAllCustomerDataResponse/*:getAllCustomerDataReturn/*:customerDataArray/*:customerDataArray["+randomValue+"]/*:customer_id/text()") 
def myTestCase = context.testCase 
propTestStep = myTestCase.getTestStepByName("Properties") 
propTestStep.setPropertyValue("AccountID", AccountID)
propTestStep.setPropertyValue("CustomerID", CustomerID)</script></con:config></con:testStep><con:testStep type="request" id="d3bdcbff-10c7-41c5-bc87-5457a2eac2e5" name="createCustomerAccount"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BankServiceSoapBinding</con:interface><con:operation>createCustomerAccount</con:operation><con:request name="createCustomerAccount" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="42a8407f-1689-4838-b588-0c5a69ed292e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/redesigned-invention/services/BankService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://service.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:createCustomerAccount>
         <ser:customer_id>${Properties#CustomerID}</ser:customer_id>
         <ser:account_id>${Properties#AccountID}</ser:account_id>
      </ser:createCustomerAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="5b4cc642-2d0f-4d9b-9529-20eece6ad52e" name="SOAP Response"/><con:assertion type="SOAP Fault Assertion" id="f5516d99-2d30-4be6-bf8c-7d9615500d00" name="Not SOAP Fault"/><con:assertion type="Simple NotContains" id="d7f344b8-8ac7-4e18-af07-36a8af91c50d" name="Not Contains - Customer ID does not exist"><con:configuration><token>Customer ID does not exist</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="6a89cb62-8370-4c71-826e-d851caa871f6" name="Not Contains - Error"><con:configuration><token>Error</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="8b58043a-6e2c-4dc9-a810-b7806d05840e" name="Not Contains - Account ID does not exist"><con:configuration><token>Account ID does not exist</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Equals" id="5a9b9472-284d-4a9a-ad86-96abac8ab23b" name="Mapping Created XML"><con:configuration><patternText><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soapenv:Body>
      <createCustomerAccountResponse xmlns="http://service.com">
         <createCustomerAccountReturn>Mapping Created</createCustomerAccountReturn>
      </createCustomerAccountResponse>
   </soapenv:Body>
</soapenv:Envelope>]]></patternText><caseSensitive>true</caseSensitive></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="202756a3-9f44-4c67-91a4-6c25819640cf" name="Not Contains SQL Error"><con:configuration><token>SQL Error</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.com/BankService/createCustomerAccountRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" id="69720845-6629-46d7-8362-010d0598112c" name="getAccountDetailsByCustomerID"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BankServiceSoapBinding</con:interface><con:operation>getAccountDetailsByCustomerID</con:operation><con:request name="getAccountDetailsByCustomerID" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="d84bdb8b-9445-49b2-b79e-d023dc4efb1f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/redesigned-invention/services/BankService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://service.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getAccountDetailsByCustomerID>
         <ser:customer_id>${Properties#CustomerID}</ser:customer_id>
      </ser:getAccountDetailsByCustomerID>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="8530f68d-313a-4dec-84dd-624c8f1a78ad" name="SOAP Response"/><con:assertion type="SOAP Fault Assertion" id="602e20d6-6fb6-4579-8783-c4d032110db8" name="Not SOAP Fault"/><con:assertion type="XPath Match" id="e3bd76ac-24e3-4718-9871-c61711553aa5" name="Check for existence of [account_id]"><con:configuration><path>declare namespace ns1='http://service.com';
exists( //ns1:getAccountDetailsByCustomerIDResponse/ns1:getAccountDetailsByCustomerIDReturn/ns1:accountDataArray/ns1:accountDataArray/ns1:account_id)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="441ea394-74b2-4273-8a72-16dd85660cf7" name="AccountID"><con:configuration><token>${Properties#AccountID}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.com/BankService/getAccountDetailsByCustomerIDRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" id="844c1658-c8b3-44f0-9857-c23a83da5a71" name="getCustomerDetailsByAccountID"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BankServiceSoapBinding</con:interface><con:operation>getCustomerDetailsByAccountID</con:operation><con:request name="getCustomerDetailsByAccountID" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="6283af17-1425-4b62-912c-8862da4b096d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/redesigned-invention/services/BankService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://service.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getCustomerDetailsByAccountID>
         <ser:account_id>${Properties#AccountID}</ser:account_id>
      </ser:getCustomerDetailsByAccountID>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="3e951dad-be6c-48cb-9315-4550d9541f13" name="SOAP Response"/><con:assertion type="SOAP Fault Assertion" id="de5362e7-3024-4de7-9065-33e2a599b9d6" name="Not SOAP Fault"/><con:assertion type="XPath Match" id="eca14e22-c0f5-420d-97ac-b9affc459564" name="Check for existence of [customer_id]"><con:configuration><path>declare namespace ns1='http://service.com';
exists( //ns1:getCustomerDetailsByAccountIDResponse/ns1:getCustomerDetailsByAccountIDReturn/ns1:customerDataArray/ns1:customerDataArray/ns1:customer_id)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b3aea6b4-5b3d-4272-a363-cd9e9c19989a" name="Contains CustomerID"><con:configuration><token>${Properties#CustomerID}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.com/BankService/getCustomerDetailsByAccountIDRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Looper" id="68253f6f-ec0f-4305-9cf8-37065ce088b1"><con:settings/><con:config><script>def myTestCase = context.testCase 
propTestStep = myTestCase.getTestStepByName("Properties") 

def localloopIndex = propTestStep.getPropertyValue("loopIndex") as Integer
def localloopEnd = propTestStep.getPropertyValue("loopEnd") as Integer
if(  localloopIndex   &lt; localloopEnd ){
	propTestStep.setPropertyValue("loopIndex", (localloopIndex  + 1) as String)	
	testRunner.gotoStepByName( "getAllAccountData" )
}



</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>37f1d245-4239-4142-96db-df1fb76aeb26</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>757713ab-4d0d-4165-ac3e-2942e0a93c4e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>80dc6157-11e8-4523-9315-f580969ec310</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3e891f70-ffb6-4597-bc60-1cb9f22e045c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f16ae568-5a25-4c48-8938-c60368159798</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
